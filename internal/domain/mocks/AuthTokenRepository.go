// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	domain "github.com/garixx/workshop-app/internal/domain"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// AuthTokenRepository is an autogenerated mock type for the AuthTokenRepository type
type AuthTokenRepository struct {
	mock.Mock
}

// FetchToken provides a mock function with given fields: token
func (_m *AuthTokenRepository) FetchToken(token string) (domain.AuthToken, error) {
	ret := _m.Called(token)

	var r0 domain.AuthToken
	if rf, ok := ret.Get(0).(func(string) domain.AuthToken); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(domain.AuthToken)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreToken provides a mock function with given fields: authTokenParams
func (_m *AuthTokenRepository) StoreToken(authTokenParams domain.AuthTokenParams) (domain.AuthToken, error) {
	ret := _m.Called(authTokenParams)

	var r0 domain.AuthToken
	if rf, ok := ret.Get(0).(func(domain.AuthTokenParams) domain.AuthToken); ok {
		r0 = rf(authTokenParams)
	} else {
		r0 = ret.Get(0).(domain.AuthToken)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.AuthTokenParams) error); ok {
		r1 = rf(authTokenParams)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthTokenRepository creates a new instance of AuthTokenRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthTokenRepository(t testing.TB) *AuthTokenRepository {
	mock := &AuthTokenRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
